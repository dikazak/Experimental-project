pipeline {
    agent any

    environment {
        ARTIFACT = "Experimental-project"

        SCM_REPO_URL = "https://github.com/dikazak/Experimental-project.git"
    }

    stages {

        stage('Initialization') {
            steps {
                script {
                    currentBuild.displayName = "Build"
                }
                slackSend(color: '#4eade9', message: "Slack practice: deploy started")
            }
        }

        stage('Repository checkout') {
            steps {
                git branch: "${BRANCH}", credentialsId: "${SCM_CREDENTIALS_ID}", url: "${SCM_REPO_URL}"
            }
        }

        stage("send diff") {
            steps {
                script {
                    def publisher = LastChanges.getLastChangesPublisher null, "SIDE", "LINE", true, true, "", "", "", "", ""
                    publisher.publishLastChanges()
                    def changes = publisher.getLastChanges()
                    echo changes.getEscapedDiff()
                    for (commit in changes.getCommits()) {
                        echo commit
                        def commitInfo = commit.getCommitInfo()
                        echo commitInfo
                        echo commitInfo.getCommitMessage()
                        echo commit.getChanges()
                    }
               }
            }
        }
    }

    post {
        success {
            script {
                    def publisher = LastChanges.getLastChangesPublisher null, "SIDE", "LINE", true, true, "", "", "", "", ""
                    publisher.publishLastChanges()
                    def changes = publisher.getLastChanges()
                    env.ESCAPED_DIFF = changes.getEscapedDiff()
                    for (commit in changes.getCommits()) {
                        env.COMMIT = commit
                        def commitInfo = commit.getCommitInfo()
                        env.COMMIT_INFO = commitInfo
                        env.COMMIT_MESSAGE = commitInfo.getCommitMessage()
                        env.COMMIT_CHANGES = commit.getChanges()
                        slackSend(color: '#44c480', message: "Slack practice. deploy finished: success. ESCAPED_DIFF: ${ESCAPED_DIFF}. COMMIT: ${COMMIT}. COMMIT_INFO: ${COMMIT_INFO}. COMMIT_MESSAGE: ${COMMIT_MESSAGE}. COMMIT_CHANGES: ${COMMIT_CHANGES}")
                    }
               }
        }
        failure {
            script {
                    def publisher = LastChanges.getLastChangesPublisher null, "SIDE", "LINE", true, true, "", "", "", "", ""
                    publisher.publishLastChanges()
                    def changes = publisher.getLastChanges()
                    env.ESCAPED_DIFF = changes.getEscapedDiff()
                    for (commit in changes.getCommits()) {
                        env.COMMIT = commit
                        def commitInfo = commit.getCommitInfo()
                        env.COMMIT_INFO = commitInfo
                        env.COMMIT_MESSAGE = commitInfo.getCommitMessage()
                        env.COMMIT_CHANGES = commit.getChanges()
                        slackSend(color: '#de5b62', message: "Slack practice. deploy finished: <${currentBuild.absoluteUrl}console|failure>. ESCAPED_DIFF: ${ESCAPED_DIFF}. COMMIT: ${COMMIT}. COMMIT_INFO: ${COMMIT_INFO}. COMMIT_MESSAGE: ${COMMIT_MESSAGE}. COMMIT_CHANGES: ${COMMIT_CHANGES}")
                    }
               }
        }
    }
}
